// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Milky.OsuPlayer.Data;

namespace Milky.OsuPlayer.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("BeatmapCollection", b =>
                {
                    b.Property<string>("BeatmapsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CollectionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("BeatmapsId", "CollectionsId");

                    b.HasIndex("CollectionsId");

                    b.ToTable("BeatmapCollection");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.Beatmap", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtistUnicode")
                        .HasColumnType("TEXT");

                    b.Property<string>("AudioFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("AudioPreviewTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeatmapFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<double>("DiffSrNoneCtB")
                        .HasColumnType("REAL");

                    b.Property<double>("DiffSrNoneMania")
                        .HasColumnType("REAL");

                    b.Property<double>("DiffSrNoneStandard")
                        .HasColumnType("REAL");

                    b.Property<double>("DiffSrNoneTaiko")
                        .HasColumnType("REAL");

                    b.Property<int>("DrainTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderNameOrPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InOwnDb")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SongSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("SongTags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleUnicode")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Beatmaps");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForceLyricId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HitsoundVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LyricOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MusicVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Offset")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PlayUseTempo")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("PlaybackRate")
                        .HasColumnType("REAL");

                    b.Property<int?>("SampleVolume")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId")
                        .IsUnique();

                    b.ToTable("BeatmapConfigs");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapCurrentPlay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlayTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapExport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExportPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId")
                        .IsUnique();

                    b.ToTable("Exports");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapRecentPlay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlayTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.ToTable("RecentList");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapStoryboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoryboardVideoPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId")
                        .IsUnique();

                    b.ToTable("Storyboards");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapThumb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BeatmapStoryboardId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbPath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoPath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId")
                        .IsUnique();

                    b.HasIndex("BeatmapStoryboardId");

                    b.ToTable("Thumbs");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e3d1fed-49db-4899-9775-cb4893e547a1"),
                            CreateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Index = 0,
                            IsDefault = true,
                            Name = "Favorite",
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.CollectionRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BeatmapId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("BeatmapCollection", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", null)
                        .WithMany()
                        .HasForeignKey("BeatmapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Milky.OsuPlayer.Data.Models.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapConfig", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithOne("BeatmapConfig")
                        .HasForeignKey("Milky.OsuPlayer.Data.Models.BeatmapConfig", "BeatmapId");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapCurrentPlay", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithMany()
                        .HasForeignKey("BeatmapId");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapExport", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithOne("BeatmapExport")
                        .HasForeignKey("Milky.OsuPlayer.Data.Models.BeatmapExport", "BeatmapId");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapRecentPlay", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithMany()
                        .HasForeignKey("BeatmapId");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapStoryboard", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithOne("BeatmapStoryboard")
                        .HasForeignKey("Milky.OsuPlayer.Data.Models.BeatmapStoryboard", "BeatmapId");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.BeatmapThumb", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithOne("BeatmapThumb")
                        .HasForeignKey("Milky.OsuPlayer.Data.Models.BeatmapThumb", "BeatmapId");

                    b.HasOne("Milky.OsuPlayer.Data.Models.BeatmapStoryboard", "BeatmapStoryboard")
                        .WithMany()
                        .HasForeignKey("BeatmapStoryboardId");

                    b.Navigation("Beatmap");

                    b.Navigation("BeatmapStoryboard");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.CollectionRelation", b =>
                {
                    b.HasOne("Milky.OsuPlayer.Data.Models.Beatmap", "Beatmap")
                        .WithMany()
                        .HasForeignKey("BeatmapId");

                    b.HasOne("Milky.OsuPlayer.Data.Models.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beatmap");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Milky.OsuPlayer.Data.Models.Beatmap", b =>
                {
                    b.Navigation("BeatmapConfig");

                    b.Navigation("BeatmapExport");

                    b.Navigation("BeatmapStoryboard");

                    b.Navigation("BeatmapThumb");
                });
#pragma warning restore 612, 618
        }
    }
}
