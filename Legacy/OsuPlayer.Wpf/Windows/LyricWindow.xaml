<presentation:WindowEx
    x:Class="Milky.OsuPlayer.Windows.LyricWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:buttonComponent="clr-namespace:Milky.OsuPlayer.UiComponents.ButtonComponent"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:debugging="clr-namespace:Milky.OsuPlayer.Presentation.Debugging;assembly=OsuPlayer.Presentation"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:presentation="clr-namespace:Milky.OsuPlayer.Presentation;assembly=OsuPlayer.Presentation"
    xmlns:shaderEffects="clr-namespace:MDS.ShaderEffects;assembly=ShaderEffects"
    xmlns:textBlockComponent="clr-namespace:Milky.OsuPlayer.UiComponents.TextBlockComponent"
    xmlns:textBoxComponent="clr-namespace:Milky.OsuPlayer.UiComponents.TextBoxComponent"
    xmlns:viewModels="clr-namespace:Milky.OsuPlayer.ViewModels"
    Title="Lyric Window"
    Height="90"
    AllowsTransparency="True"
    Background="Transparent"
    BorderBrush="Black"
    FontFamily="{StaticResource SspRegular}"
    Loaded="LyricWindow_Loaded"
    ResizeMode="NoResize"
    ShowInTaskbar="False"
    SizeToContent="Height"
    Topmost="True"
    WindowStyle="None"
    mc:Ignorable="d">
    <presentation:WindowEx.Resources>
        <ControlTemplate x:Key="PlayButtonTempl">
            <Canvas Width="1000" Height="1000">
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M853.2 597.5L253.5 973.4l-0.5-0.7c-4.3 2.7-8.8 5.1-13.4 7.2c-0.1 0.1-0.3 0.1-0.5 0.3c-4.5 2-9.2 3.8-14 5.2c-0.3 0.1-0.7 0.1-1 0.3c-2.1 0.6-4.2 1.1-6.3 1.5c-0.4 0.1-0.7 0.2-1.1 0.3c-2.4 0.6-4.8 1-7.2 1.3c-0.4 0.1-0.8 0.1-1.2 0.1c-2 0.3-4 0.6-6.1 0.7c-0.6 0.1-1.3 0.1-1.9 0.1c-2.4 0.1-4.9 0.3-7.4 0.3C130.4 990 91 923.3 91 860.9l0 0l0 0l0-720.9l0 0C91 77.6 130.4 10 192.8 10c23.7 0 45.6 7.3 63.8 19.7l595.6 372.2c34 19.5 56.8 56.1 56.8 98.1C909 541.6 886.6 577.9 853.2 597.5z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
            </Canvas>
        </ControlTemplate>
        <ControlTemplate x:Key="PauseButtonTempl">
            <Canvas Width="1000" Height="1000">
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M806.3 10c-4.2 0-159 0-163.3 0c-27 0-48.8 21.9-48.8 48.8c0 4.2 0 878.1 0 882.3c0 27 21.9 48.8 48.8 48.8c4.2 0 159 0 163.3 0c27 0 48.8-21.9 48.8-48.8c0-4.2 0-878.1 0-882.3C855.2 31.9 833.3 10 806.3 10z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M356.9 10c-4.2 0-159 0-163.3 0c-27 0-48.8 21.9-48.8 48.8c0 4.2 0 878.1 0 882.3c0 27 21.9 48.8 48.8 48.8c4.2 0 159 0 163.3 0c27 0 48.8-21.9 48.8-48.8c0-4.2 0-878.1 0-882.3C405.8 31.9 383.9 10 356.9 10z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
            </Canvas>
        </ControlTemplate>
        <ControlTemplate x:Key="PrevButtonTempl">
            <Canvas Width="1000" Height="1000">
                <Canvas.RenderTransform>
                    <RotateTransform Angle="180" CenterX="500" CenterY="500" />
                </Canvas.RenderTransform>
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M905.9 16.1h-52.6c-24.7 0-44.8 20-44.8 44.8v361.9c-5.1-4.3-10.8-8.3-17-12.2L176.2 29.3C106.4-13.9 49.3 17.9 49.3 100v801.4c0 82.1 56.4 112.8 125.3 68.3l618.5-399.4c5.6-3.6 10.8-7.4 15.5-11.4v380.4c0 24.7 20 44.8 44.8 44.8h52.6c24.7 0 44.8-20 44.8-44.8V60.9C950.7 36.2 930.6 16.1 905.9 16.1z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
            </Canvas>
        </ControlTemplate>
        <ControlTemplate x:Key="NextButtonTempl">
            <Canvas Width="1000" Height="1000">
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M905.9 16.1h-52.6c-24.7 0-44.8 20-44.8 44.8v361.9c-5.1-4.3-10.8-8.3-17-12.2L176.2 29.3C106.4-13.9 49.3 17.9 49.3 100v801.4c0 82.1 56.4 112.8 125.3 68.3l618.5-399.4c5.6-3.6 10.8-7.4 15.5-11.4v380.4c0 24.7 20 44.8 44.8 44.8h52.6c24.7 0 44.8-20 44.8-44.8V60.9C950.7 36.2 930.6 16.1 905.9 16.1z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
            </Canvas>
        </ControlTemplate>
        <ControlTemplate x:Key="LockButtonTempl">
            <Canvas Width="1000" Height="1000">
                <Path Fill="{TemplateBinding Foreground}">
                    <Path.Data>
                        <PathGeometry Figures="M818.5 445.7h-78.9V261.9C701.3 12.1 500.9 10 500.9 10C275.8 28.7 260.4 247.4 260.4 247.4v198.3h-78.9c-18.9 0-34.2 14.4-34.2 32.2v479.8c0 17.8 15.3 32.3 34.2 32.3h637c18.9 0 34.2-14.4 34.2-32.3V477.9C852.7 460.1 837.4 445.7 818.5 445.7z M373.3 256.8C402.5 114.8 500 137.5 500 137.5c113.9 2 122.1 111 122.1 111v197.2H373.3V256.8z" FillRule="NonZero" />
                    </Path.Data>
                </Path>
            </Canvas>
        </ControlTemplate>
        <ControlTemplate x:Key="CloseButtonTempl">
            <Canvas Width="5000" Height="5000">
                <Canvas.RenderTransform>
                    <TranslateTransform X="-2500" Y="2500" />
                </Canvas.RenderTransform>
                <Path Data="{StaticResource No}" Fill="{TemplateBinding Foreground}" />
            </Canvas>
        </ControlTemplate>
    </presentation:WindowEx.Resources>
    <presentation:WindowEx.DataContext>
        <viewModels:LyricWindowViewModel />
    </presentation:WindowEx.DataContext>
    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Border
            x:Name="ToolBar"
            Grid.Row="0"
            HorizontalAlignment="Center"
            Background="#60453035"
            BorderBrush="#c0303030"
            BorderThickness="2,2,2,0">
            <Border.Resources>
                <Style BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" TargetType="Separator">
                    <Setter Property="Margin" Value="3,10" />
                    <Setter Property="UseLayoutRounding" Value="True" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Background" Value="#30FFFFFF" />
                </Style>
            </Border.Resources>
            <Border.Style>
                <Style TargetType="FrameworkElement">
                    <Style.Triggers>
                        <DataTrigger
                            debugging:TriggerTracing.TraceEnabled="True"
                            debugging:TriggerTracing.TriggerName="LyricWindow -&gt; ShowFrame"
                            Binding="{Binding ShowFrame}"
                            Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ShowFrame}" Value="False">
                            <Setter Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <StackPanel Orientation="Horizontal">
                <buttonComponent:CommonButton
                    x:Name="BtnPrev"
                    Margin="10,0,5,0"
                    Click="BtnPrev_Click"
                    IconTemplate="{StaticResource PrevButtonTempl}"
                    Style="{StaticResource LyricButton}" />
                <buttonComponent:CommonButton
                    x:Name="BtnPlay"
                    Margin="5,0"
                    Click="BtnPlay_Click"
                    Style="{StaticResource LyricButton}">
                    <buttonComponent:CommonButton.IconTemplate>
                        <MultiBinding Converter="{StaticResource PlayingConverter}">
                            <Binding Path="Shared.IsPlaying" />
                            <Binding RelativeSource="{RelativeSource AncestorType=Window}" />
                        </MultiBinding>
                    </buttonComponent:CommonButton.IconTemplate>
                </buttonComponent:CommonButton>
                <buttonComponent:CommonButton
                    x:Name="BtnNext"
                    Margin="5,0"
                    Click="BtnNext_Click"
                    IconTemplate="{StaticResource NextButtonTempl}"
                    Style="{StaticResource LyricButton}" />
                <Separator />
                <buttonComponent:CommonButton
                    x:Name="BtnFont"
                    Margin="5,0"
                    Click="BtnFont_Click"
                    IconTemplate="{StaticResource FontTempl}"
                    Style="{StaticResource LyricButton}" />
                <buttonComponent:CommonButton
                    x:Name="BtnPalette"
                    Margin="5,0"
                    Click="BtnPalette_Click"
                    IconTemplate="{StaticResource PaletteTempl}"
                    Style="{StaticResource LyricButton}" />
                <Separator />
                <buttonComponent:CommonButton
                    x:Name="BtnLock"
                    Margin="5,0"
                    Click="BtnLock_Click"
                    IconTemplate="{StaticResource LockButtonTempl}"
                    Style="{StaticResource LyricButton}" />
                <buttonComponent:CommonButton
                    x:Name="BtnHide"
                    Margin="5,0,10,0"
                    Click="BtnHide_Click"
                    IconTemplate="{StaticResource CloseButtonTempl}"
                    Style="{StaticResource LyricButton}" />
            </StackPanel>
        </Border>
        <Grid
            x:Name="GridLyricFake"
            Grid.Row="1"
            HorizontalAlignment="Left"
            Background="Red"
            Opacity="0">
            <textBlockComponent:OutlinedTextBlock
                x:Name="TbLyricFake"
                Width="Auto"
                Margin="3,0"
                Fill="HotPink"
                FontFamily="{StaticResource SspRegular}"
                FontSize="{Binding ElementName=TbLyric, Path=FontSize}"
                FontWeight="{Binding ElementName=TbLyric, Path=FontWeight}"
                Opacity="2"
                SnapsToDevicePixels="True"
                Stroke="{Binding ElementName=TbLyric, Path=Stroke}"
                StrokeThickness="{Binding ElementName=TbLyric, Path=StrokeThickness}"
                Text="{Binding ElementName=TbLyric, Path=Text}" />
        </Grid>
        <Grid
            Grid.Row="1"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Visibility="Collapsed">
            <TextBlock Background="Cyan">
                <Run Text="Width:" />
                <Run Text="{Binding ElementName=TbLyricFake, Path=ActualWidth, Mode=OneWay}" />
            </TextBlock>
        </Grid>
        <Grid
            x:Name="CutView"
            Grid.Row="1"
            Width="{Binding ElementName=GridLyricFake, Path=ActualWidth}"
            MinWidth="{Binding ElementName=ToolBar, Path=ActualWidth}"
            MaxWidth="600"
            HorizontalAlignment="Center"
            ClipToBounds="True"
            Cursor="SizeAll"
            MouseDown="ImgLyric_MouseDown"
            MouseUp="ImgLyric_MouseUp">
            <Border
                x:Name="ShadowBar"
                Width="{Binding ElementName=CutView, Path=ActualWidth}"
                Height="{Binding ElementName=CutView, Path=ActualHeight}"
                MinWidth="{Binding ElementName=ToolBar, Path=ActualWidth}"
                HorizontalAlignment="Left"
                Background="#60303030">
                <Border.Style>
                    <Style TargetType="FrameworkElement">
                        <Style.Triggers>
                            <DataTrigger
                                debugging:TriggerTracing.TraceEnabled="True"
                                debugging:TriggerTracing.TriggerName="LyricWindow -&gt; ShowFrame"
                                Binding="{Binding ShowFrame}"
                                Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ShowFrame}" Value="False">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
            <Border
                ClipToBounds="False"
                SnapsToDevicePixels="True"
                UseLayoutRounding="True">
                <!--<Border.OpacityMask>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0.95" Color="Black" />
                            <GradientStop Offset="1" Color="Transparent" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.OpacityMask>-->
                <Border
                    x:Name="LyricBar"
                    HorizontalAlignment="Left"
                    ClipToBounds="False"
                    SnapsToDevicePixels="True"
                    UseLayoutRounding="True">
                    <Border.Effect>
                        <shaderEffects:AdjustSaturationEffect Delta="{Binding Saturation}" />
                    </Border.Effect>
                    <Border
                        ClipToBounds="False"
                        SnapsToDevicePixels="True"
                        UseLayoutRounding="True">
                        <Border.Effect>
                            <shaderEffects:AdjustLightnessEffect Delta="{Binding Lightness}" />
                        </Border.Effect>
                        <textBlockComponent:OutlinedTextBlock
                            x:Name="TbLyric"
                            Width="{Binding ElementName=TbLyricFake, Path=ActualWidth}"
                            Margin="3,0,0,0"
                            VerticalAlignment="Center"
                            FontFamily="{Binding FontFamily}"
                            FontSize="36"
                            FontWeight="Bold"
                            SnapsToDevicePixels="True"
                            Stroke="White"
                            StrokeThickness="4"
                            UseLayoutRounding="False">
                            <textBlockComponent:OutlinedTextBlock.Fill>
                                <ImageBrush
                                    ImageSource="{StaticResource TextureSource1}"
                                    Stretch="UniformToFill"
                                    TileMode="FlipXY" />
                            </textBlockComponent:OutlinedTextBlock.Fill>
                            <textBlockComponent:OutlinedTextBlock.Effect>
                                <shaderEffects:AdjustHueEffect Delta="{Binding Hue}" />
                            </textBlockComponent:OutlinedTextBlock.Effect>
                        </textBlockComponent:OutlinedTextBlock>
                    </Border>
                    <!--<Image
                        x:Name="ImgLyric"
                        HorizontalAlignment="Left"
                        Cursor="SizeAll"
                        MouseDown="ImgLyric_MouseDown"
                        MouseUp="ImgLyric_MouseUp"
                        RenderOptions.BitmapScalingMode="Linear"
                        Stretch="None" />-->
                </Border>
            </Border>
            <Border
                x:Name="StrokeBar"
                Width="{Binding ElementName=CutView, Path=ActualWidth}"
                Height="{Binding ElementName=CutView, Path=ActualHeight}"
                MinWidth="{Binding ElementName=ToolBar, Path=ActualWidth}"
                HorizontalAlignment="Left"
                BorderBrush="#c0303030"
                BorderThickness="2">
                <Border.Style>
                    <Style TargetType="FrameworkElement">
                        <Style.Triggers>
                            <DataTrigger
                                debugging:TriggerTracing.TraceEnabled="True"
                                debugging:TriggerTracing.TriggerName="LyricWindow -&gt; ShowFrame"
                                Binding="{Binding ShowFrame}"
                                Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ShowFrame}" Value="False">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </Grid>
        <Popup
            x:Name="popHsl"
            Width="230"
            AllowsTransparency="True"
            PlacementTarget="{Binding ElementName=BtnFont}"
            StaysOpen="False">
            <Popup.Resources>
                <Style BasedOn="{StaticResource {x:Type textBoxComponent:CommonTextBox}}" TargetType="textBoxComponent:CommonTextBox">
                    <Setter Property="IsReadOnly" Value="True" />
                    <Setter Property="Width" Value="46" />
                    <Setter Property="Height" Value="auto" />
                    <Setter Property="MinHeight" Value="0" />
                    <Setter Property="Margin" Value="5,0" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="FontSize" Value="10" />
                </Style>
                <Style BasedOn="{StaticResource HorizontalSliderWhiteStyle}" TargetType="Slider">
                    <Setter Property="IsSnapToTickEnabled" Value="False" />
                    <Setter Property="Maximum" Value="1" />
                    <Setter Property="Minimum" Value="-1" />
                    <Setter Property="TickFrequency" Value="0.0125" />
                </Style>
                <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="FontSize" Value="10" />
                </Style>
            </Popup.Resources>
            <Grid Background="White">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Label Grid.Row="0" Content="{DynamicResource ui-hue}" />
                <Slider
                    Grid.Row="0"
                    Grid.Column="1"
                    Thumb.DragCompleted="sldHue_OnDragCompleted"
                    Value="{Binding Hue}" />
                <textBoxComponent:CommonTextBox
                    Grid.Row="0"
                    Grid.Column="2"
                    Text="{Binding Hue, Converter={StaticResource RoundedNumberConverter}}" />
                <Label
                    Grid.Row="1"
                    Grid.Column="0"
                    Content="{DynamicResource ui-saturation}" />
                <Slider
                    Grid.Row="1"
                    Grid.Column="1"
                    Thumb.DragCompleted="sldSaturation_OnDragCompleted"
                    Value="{Binding Saturation}" />
                <textBoxComponent:CommonTextBox
                    Grid.Row="1"
                    Grid.Column="2"
                    Text="{Binding Saturation, Converter={StaticResource RoundedNumberConverter}}" />
                <Label
                    Grid.Row="2"
                    Grid.Column="0"
                    Content="{DynamicResource ui-lightness}" />
                <Slider
                    Grid.Row="2"
                    Grid.Column="1"
                    Maximum="0"
                    Thumb.DragCompleted="sldLightness_OnDragCompleted"
                    Value="{Binding Lightness}" />
                <textBoxComponent:CommonTextBox
                    Grid.Row="2"
                    Grid.Column="2"
                    Text="{Binding Lightness, Converter={StaticResource RoundedNumberConverter}}" />
            </Grid>
        </Popup>
        <Popup
            x:Name="popFontFamily"
            Width="255"
            Height="300"
            PlacementTarget="{Binding ElementName=BtnFont}"
            StaysOpen="False">
            <ListView
                x:Name="lvFontFamilies"
                ItemContainerStyle="{StaticResource GridView}"
                ItemsSource="{Binding AllFontFamilies}"
                Loaded="FrameworkElement_OnLoaded"
                SelectedItem="{Binding FontFamily, Mode=TwoWay}"
                Style="{StaticResource ListView}"
                TextBlock.FontSize="16">
                <ListView.View>
                    <GridView ColumnHeaderContainerStyle="{StaticResource HiddenHeaderStyle}">
                        <GridViewColumn Width="230">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Label
                                        Padding="2"
                                        Content="{Binding Converter={StaticResource LocalizedFontFamilyConverter}}"
                                        FontFamily="{Binding}"
                                        FontSize="16" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>
                <ListView.ItemTemplate>
                    <DataTemplate DataType="FontFamily">
                        <TextBlock FontFamily="{Binding}" Text="{Binding Converter={StaticResource LocalizedFontFamilyConverter}}" />
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </Popup>
    </Grid>
</presentation:WindowEx>

